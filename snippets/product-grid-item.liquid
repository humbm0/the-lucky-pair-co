{% comment %}
It may be a good idea to provide a theme setting that lets a merchant decide how many products to show per row
on collection pages. Or, it may be a good idea to provide a control on the store front which lets a shopper decide
whether items be presented in a grid or in a list.
That information about the presentation can be passed on to the product-grid-item.liquid snippet via the 'with' argument.
Use of the 'with' argument is explained here: http://docs.shopify.com/themes/theme-templates/snippets.
The information can then be referred to by accessing the variable which goes by the same name as the snippet,
in this case product-grid-item. If the 'with' argument is not used, the snippet variable is set to an empty string.
Here, for the sake of teaching, we will use 2 presentation options:
- 3 products per row, when passing the value 'three-per-row' to the snippet
- 4 products per row, when passing the value 'four-per-row' to the snippet
{% endcomment %}

{% comment %}If no value is passed to the snippet, we will set the snippet variable to a sensible default.{% endcomment %}
{% if product-grid-item == '' %}{% assign product-grid-item = 'three-per-row' %}{% endif %}

{% comment %}Is this product on sale?{% endcomment %}
{% assign on_sale = false %}
{% if product.compare_at_price > product.price %}
  {% assign on_sale = true %}
{% endif %}


<div class="product-item col-md-3 col-sm-4 col-xs-6 centered {{ product-grid-item }}{% unless product.available %} sold-out{% endunless %}{% if on_sale %} on-sale{% endif %}{% if product-grid-item == 'four-per-row' %}{% cycle 'last': '', '', '', ' last-in-row' %}{% elsif product-grid-item == 'three-per-row' %}{% cycle 'last': '', '', ' last-in-row' %}{% endif %}">
  <form method="post" action="/cart/add">
    <a href="{{ product.url | within: collection }}">
      <div class="product-img-wrapper">
        <img src="{{ product | img_url: 'grande' }}" alt="{{ product.featured_image.alt | escape }}" />
        <div class="quick-view"><p>QUICK VIEW</p></div>
      </div>
    </a>
    <p>{{ product.title }}</p>
    <p class="acent">{{ product.price | money  }}</p>
    {% if on_sale %}
      <s class="compare-at-price">{{ product.compare_at_price | money }}</s>
    {% endif %}
    <span class="shopify-product-reviews-badge" data-id="{{ product.id }}"></span>
    <!-- <a href="#">Add to cart</a> -->
    <input type="hidden" name="id" value="{{ product.variants.first.id }}" />
    <input type="submit" value="Add to cart" class="add-to-cart btn" />
  </form>
</div>

{% comment %}
You don't need to use a clearing div. Use whatever it is you use to clear
floated elements. The code that follows just just shows you how to use a cycle element.
Notice that we named it ( 'clear' ). We need to name it because there's another cycle
element in this file ( we called that other one 'last' ). If you have more than one
cycle element in a rendered view, you'll need to name all of them.
The cycle element is documented here: http://docs.shopify.com/themes/liquid-basics/logic#cycle
{% endcomment %}

{% if product-grid-item == 'six-per-row' %}
{% cycle 'clear': '', '', '', '', '', '<div style="clear:both"></div>' %}
{% elsif product-grid-item == 'five-per-row' %}
{% cycle 'clear': '', '', '', '', '<div style="clear:both"></div>' %}
{% elsif product-grid-item == 'four-per-row' %}
{% cycle 'clear': '', '', '', '<div style="clear:both"></div>' %}
{% elsif product-grid-item == 'three-per-row' %}
{% cycle 'clear': '', '', '<div style="clear:both"></div>' %}
{% elsif product-grid-item == 'two-per-row' %}
{% cycle 'clear': '', '<div style="clear:both"></div>' %}
{% endif %}
